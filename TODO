Web Server
- Better error handling 
- Index page with list of all URLs
- HTTPS
- Packaging formats

===============
Anonymity
- Design a dynamic group -- handles new connections, disconnections, and blame
- The process for creating a session should be peers register, a leader not ready rejects, peers continue to register until successful, leader notifies all of starting
- Need some structure to communicate group status / change
- Make sessions optionally multithreaded, we really don't want crypto computation in the main thread
- Need some means to initiate a group / session
- (Memory) Provide mechanisms to clear out intermediate state from Rounds
- (Memory) Move logic for individual states into separate classes

Connections
- ConnectionTable should be a value type
- ConnectionManager and maybe EL should turn reject requests for connections when closed

Crypto
- Add QCA or Botan CryptoLibraries, take a look at the src/Crypto/CryptoFactory and other related files to get a general feel

Messaging
- Rpc messages are not deterministic, ignored outgoing Requests are never removed from the local _requests stack ... do we push more work on the user (calling code) or into the Rpc...

Overall
- Replace all pointers with qscoped / qshared pointers
- Consider removing qsharedata and replacing it with qsharedpointers

Overlay
- Implement Chord and use for overlay broadcasting and overall group dynamics

Transports
- EdgeListeners should produce QSharedPointer<Edge>
- Implement a UdpEL and create a reliability layer so we can use it for UdpEL and if we do other tasks that require reliable transmission (such as overlay routing).

Issues
- The current protocol doesn't work properly if a non-shuffler receives an invalid go / no go message ... since no one is waiting for its private keys, thus the process will conclude potentially without his follow up.
- A malicious peer or a bad network may redeliver the same message multiple times ... ignore duplicate messages by verifying they exist in the logs...
- Consider application aware and network layer broadcasting, evaluate performance as well as security / anonymity risks
- Tests RoundTest Null and DisconnectEnd do not work for protocols that have "infinite" internal phases (i.e., subrounds)
